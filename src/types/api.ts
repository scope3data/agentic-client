/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/mcp-initialize': {
    /**
     * Initialize MCP session
     * @description Initialize a new MCP session. This must be called before using any tools. The session ID should be generated as a UUID and included in the mcp-session-id header for all subsequent requests.
     */
    post: operations['mcp_initialize'];
  };
  '/brand-agent-list': {
    /**
     * List brand agents
     * @description List all brand agents (advertiser accounts) for the authenticated customer. Authentication is automatic - no parameters required.
     */
    post: operations['brand_agent_list'];
  };
  '/brand-agent-get': {
    /**
     * Get brand agent
     * @description Get detailed information about a specific brand agent (advertiser account) by ID.
     */
    post: operations['brand_agent_get'];
  };
  '/brand-agent-create': {
    /**
     * Create brand agent
     * @description Create a new brand agent (advertiser account). This creates the top-level container that will own campaigns, creatives, audiences, standards, and measurement sources.
     */
    post: operations['brand_agent_create'];
  };
  '/brand-agent-update': {
    /**
     * Update brand agent
     * @description Update an existing brand agent with new information.
     */
    post: operations['brand_agent_update'];
  };
  '/brand-agent-delete': {
    /**
     * Delete brand agent
     * @description Delete a brand agent. This will also delete all associated campaigns, creatives, and other resources.
     */
    post: operations['brand_agent_delete'];
  };
  '/campaign-list': {
    /**
     * List campaigns
     * @description List all campaigns with optional filtering by brand agent.
     */
    post: operations['campaign_list'];
  };
  '/campaign-create': {
    /**
     * Create campaign
     * @description Create a new campaign with natural language prompt. The backend will parse the prompt to extract targeting, budget, and creative requirements.
     */
    post: operations['campaign_create'];
  };
  '/campaign-get': {
    /**
     * Get campaign
     * @description Get detailed information about a specific campaign.
     */
    post: operations['campaign_get'];
  };
  '/campaign-update': {
    /**
     * Update campaign
     * @description Update an existing campaign with new information.
     */
    post: operations['campaign_update'];
  };
  '/campaign-delete': {
    /**
     * Delete campaign
     * @description Delete a campaign and all associated resources.
     */
    post: operations['campaign_delete'];
  };
  '/campaign-get-summary': {
    /**
     * Get campaign summary
     * @description Get a high-level summary of a campaign including key metrics and status.
     */
    post: operations['campaign_get_summary'];
  };
  '/campaign-list-tactics': {
    /**
     * List campaign tactics
     * @description List all tactics associated with a specific campaign.
     */
    post: operations['campaign_list_tactics'];
  };
  '/campaign-validate-brief': {
    /**
     * Validate campaign brief
     * @description Validate a campaign brief to ensure it contains all necessary information for campaign creation.
     */
    post: operations['campaign_validate_brief'];
  };
  '/asset-list': {
    /**
     * List assets
     * @description List all uploaded assets with optional filtering by brand agent.
     */
    post: operations['asset_list'];
  };
  '/brand-standards-create': {
    /**
     * Create brand standards
     * @description Create brand standards including guidelines, tone of voice, visual requirements, and content rules for a brand agent.
     */
    post: operations['brand_standards_create'];
  };
  '/brand-standards-delete': {
    /**
     * Delete brand standards
     * @description Delete brand standards for a brand agent.
     */
    post: operations['brand_standards_delete'];
  };
  '/brand-standards-list': {
    /**
     * List brand standards
     * @description List all brand standards with optional filtering by brand agent.
     */
    post: operations['brand_standards_list'];
  };
  '/brand-story-create': {
    /**
     * Create brand story
     * @description Create a brand story containing the narrative, history, values, and key messaging for a brand agent.
     */
    post: operations['brand_story_create'];
  };
  '/brand-story-update': {
    /**
     * Update brand story
     * @description Update an existing brand story with new information.
     */
    post: operations['brand_story_update'];
  };
  '/brand-story-delete': {
    /**
     * Delete brand story
     * @description Delete a brand story.
     */
    post: operations['brand_story_delete'];
  };
  '/brand-story-list': {
    /**
     * List brand stories
     * @description List all brand stories with optional filtering by brand agent.
     */
    post: operations['brand_story_list'];
  };
  '/channel-list': {
    /**
     * List channels
     * @description List all available advertising channels and platforms.
     */
    post: operations['channel_list'];
  };
  '/creative-assign': {
    /**
     * Assign creative
     * @description Assign a creative to a tactic or media buy.
     */
    post: operations['creative_assign'];
  };
  '/creative-create': {
    /**
     * Create creative
     * @description Create a new creative with assets, copy, and targeting specifications.
     */
    post: operations['creative_create'];
  };
  '/creative-update': {
    /**
     * Update creative
     * @description Update an existing creative with new assets, copy, or specifications.
     */
    post: operations['creative_update'];
  };
  '/creative-delete': {
    /**
     * Delete creative
     * @description Delete a creative and remove it from any associated tactics or media buys.
     */
    post: operations['creative_delete'];
  };
  '/creative-get': {
    /**
     * Get creative
     * @description Get detailed information about a specific creative.
     */
    post: operations['creative_get'];
  };
  '/creative-list': {
    /**
     * List creatives
     * @description List all creatives with optional filtering by brand agent or campaign.
     */
    post: operations['creative_list'];
  };
  '/creative-sync-sales-agents': {
    /**
     * Sync creatives to sales agents
     * @description Synchronize creatives to connected sales agents (DSPs, publisher platforms).
     */
    post: operations['creative_sync_sales_agents'];
  };
  '/media-buy-create': {
    /**
     * Create media buy
     * @description Create a new media buy with budget, targeting, and creative specifications.
     */
    post: operations['media_buy_create'];
  };
  '/media-buy-update': {
    /**
     * Update media buy
     * @description Update an existing media buy with new budget, targeting, or creative assignments.
     */
    post: operations['media_buy_update'];
  };
  '/media-buy-delete': {
    /**
     * Delete media buy
     * @description Delete a media buy and cancel any active placements.
     */
    post: operations['media_buy_delete'];
  };
  '/media-buy-execute': {
    /**
     * Execute media buy
     * @description Execute a media buy, sending it to the configured sales agents for placement.
     */
    post: operations['media_buy_execute'];
  };
  '/media-buy-get': {
    /**
     * Get media buy
     * @description Get detailed information about a specific media buy.
     */
    post: operations['media_buy_get'];
  };
  '/media-buy-list': {
    /**
     * List media buys
     * @description List all media buys with optional filtering by brand agent, campaign, or status.
     */
    post: operations['media_buy_list'];
  };
  '/media-buy-validate-budget': {
    /**
     * Validate media buy budget
     * @description Validate a media buy budget against campaign constraints and available funds.
     */
    post: operations['media_buy_validate_budget'];
  };
  '/notifications-list': {
    /**
     * List notifications
     * @description List notifications for the authenticated user with optional filtering by status.
     */
    post: operations['notifications_list'];
  };
  '/notifications-mark-read': {
    /**
     * Mark notification as read
     * @description Mark a specific notification as read.
     */
    post: operations['notifications_mark_read'];
  };
  '/notifications-mark-acknowledged': {
    /**
     * Mark notification as acknowledged
     * @description Mark a specific notification as acknowledged.
     */
    post: operations['notifications_mark_acknowledged'];
  };
  '/notifications-mark-all-read': {
    /**
     * Mark all notifications as read
     * @description Mark all notifications for the authenticated user as read.
     */
    post: operations['notifications_mark_all_read'];
  };
  '/media-product-discover': {
    /**
     * Discover media products
     * @description Discover available media products from connected sales agents based on targeting criteria.
     */
    post: operations['media_product_discover'];
  };
  '/media-product-save': {
    /**
     * Save media product
     * @description Save a discovered media product for future use in media buys.
     */
    post: operations['media_product_save'];
  };
  '/media-product-list': {
    /**
     * List media products
     * @description List saved media products with optional filtering.
     */
    post: operations['media_product_list'];
  };
  '/media-product-sync': {
    /**
     * Sync media products
     * @description Synchronize media product catalog from connected sales agents.
     */
    post: operations['media_product_sync'];
  };
  '/sales-agent-get': {
    /**
     * Get sales agent
     * @description Get detailed information about a specific sales agent (DSP, publisher platform).
     */
    post: operations['sales_agent_get'];
  };
  '/sales-agent-list': {
    /**
     * List sales agents
     * @description List all registered sales agents (DSPs, publisher platforms).
     */
    post: operations['sales_agent_list'];
  };
  '/sales-agent-register': {
    /**
     * Register sales agent
     * @description Register a new sales agent (DSP, publisher platform) for media buying.
     */
    post: operations['sales_agent_register'];
  };
  '/sales-agent-unregister': {
    /**
     * Unregister sales agent
     * @description Unregister a sales agent and disconnect it from the platform.
     */
    post: operations['sales_agent_unregister'];
  };
  '/sales-agent-update': {
    /**
     * Update sales agent
     * @description Update sales agent configuration and credentials.
     */
    post: operations['sales_agent_update'];
  };
  '/sales-agent-account-list': {
    /**
     * List sales agent accounts
     * @description List all accounts (seats, advertisers) within a sales agent.
     */
    post: operations['sales_agent_account_list'];
  };
  '/sales-agent-account-register': {
    /**
     * Register sales agent account
     * @description Register a new account (seat, advertiser) within a sales agent.
     */
    post: operations['sales_agent_account_register'];
  };
  '/sales-agent-account-unregister': {
    /**
     * Unregister sales agent account
     * @description Unregister an account from a sales agent.
     */
    post: operations['sales_agent_account_unregister'];
  };
  '/sales-agent-account-update': {
    /**
     * Update sales agent account
     * @description Update account configuration within a sales agent.
     */
    post: operations['sales_agent_account_update'];
  };
  '/tactic-create': {
    /**
     * Create tactic
     * @description Create a new tactic defining how to achieve campaign objectives.
     */
    post: operations['tactic_create'];
  };
  '/tactic-update': {
    /**
     * Update tactic
     * @description Update an existing tactic with new targeting, budget, or creative requirements.
     */
    post: operations['tactic_update'];
  };
  '/tactic-delete': {
    /**
     * Delete tactic
     * @description Delete a tactic and all associated media buys.
     */
    post: operations['tactic_delete'];
  };
  '/tactic-get': {
    /**
     * Get tactic
     * @description Get detailed information about a specific tactic.
     */
    post: operations['tactic_get'];
  };
  '/tactic-list': {
    /**
     * List tactics
     * @description List all tactics with optional filtering by brand agent or campaign.
     */
    post: operations['tactic_list'];
  };
  '/tactic-link-campaign': {
    /**
     * Link tactic to campaign
     * @description Link a tactic to a campaign.
     */
    post: operations['tactic_link_campaign'];
  };
  '/tactic-unlink-campaign': {
    /**
     * Unlink tactic from campaign
     * @description Unlink a tactic from a campaign.
     */
    post: operations['tactic_unlink_campaign'];
  };
  '/webhook-register': {
    /**
     * Register webhook
     * @description Register a webhook to receive real-time notifications about events.
     */
    post: operations['webhook_register'];
  };
  '/webhook-list': {
    /**
     * List webhooks
     * @description List all registered webhooks.
     */
    post: operations['webhook_list'];
  };
  '/webhook-delete': {
    /**
     * Delete webhook
     * @description Delete a registered webhook.
     */
    post: operations['webhook_delete'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ListAssetsInput: {
      /** @description Optional brand agent ID to filter assets */
      brandAgentId?: number;
    };
    /** @description Parameters for listing brand agents. Authentication is automatic. */
    ListBrandAgentsInput: {
      /** @description Prisma-style where clause for filtering agents */
      where?: {
        [key: string]: unknown;
      };
      /** @description Prisma-style orderBy clause */
      orderBy?: {
        [key: string]: unknown;
      };
      /**
       * @description Number of records to return
       * @example 10
       */
      take?: number;
      /**
       * @description Number of records to skip
       * @example 0
       */
      skip?: number;
      /** @description Fields to use for distinct selection */
      distinct?: string[];
    };
    /** @description Parameters for retrieving a specific brand agent */
    GetBrandAgentInput: {
      /**
       * @description The unique identifier for the brand agent
       * @example 123
       */
      brandAgentId: number;
    };
    /** @description Parameters for creating a new brand agent */
    CreateBrandAgentInput: {
      /**
       * @description Name of the brand agent (advertiser account)
       * @example Nike Global Campaigns
       */
      name: string;
      /**
       * @description Optional description of the brand agent
       * @example Brand agent for Nike global advertising campaigns
       */
      description?: string;
      /**
       * Format: uri
       * @description URL to the brand manifest
       * @example https://example.com/brand-manifest
       */
      manifestUrl?: string;
      /**
       * @description Country codes (ISO 3166-1 alpha-2)
       * @example [
       *   "US",
       *   "CA",
       *   "GB"
       * ]
       */
      countryCodes?: string[];
    };
    /** @description Parameters for updating a brand agent */
    UpdateBrandAgentInput: {
      /**
       * @description The unique identifier for the brand agent
       * @example 123
       */
      brandAgentId: number;
      /** @description Updated name of the brand agent */
      name?: string;
      /** @description Updated description */
      description?: string;
      /**
       * Format: uri
       * @description Updated URL to the brand manifest
       * @example https://example.com/brand-manifest
       */
      manifestUrl?: string;
      /** @description Updated country codes */
      countryCodes?: string[];
    };
    /** @description Parameters for deleting a brand agent */
    DeleteBrandAgentInput: {
      /**
       * @description The unique identifier for the brand agent to delete
       * @example 123
       */
      brandAgentId: number;
    };
    CreateBrandStandardInput: {
      /** @description Brand agent ID */
      brandAgentId: number;
      /** @description Standard name */
      name?: string;
      /** @description Standard description */
      description?: string;
      /** @description Brand standards prompt */
      prompt: string;
      /** @description Whether this is the primary standard */
      isPrimary?: boolean;
      /** @description Country codes */
      countries?: string[];
      /** @description Channel types */
      channels?: ('ctv' | 'video' | 'display' | 'app' | 'social')[];
      /** @description Brand names */
      brands?: string[];
    };
    DeleteBrandStandardInput: {
      /** @description Brand standard ID */
      brandStandardId: string;
    };
    ListBrandStandardsInput: {
      /** @description Prisma-style where clause for filtering standards */
      where?: {
        [key: string]: unknown;
      };
      /** @description Prisma-style orderBy clause */
      orderBy?: {
        [key: string]: unknown;
      };
      /** @description Number of records to return */
      take?: number;
      /** @description Number of records to skip */
      skip?: number;
      /** @description Fields to use for distinct selection */
      distinct?: string[];
    };
    CreateBrandStoryInput: {
      /** @description Brand agent ID (bigint or string) */
      brandAgentId: number | string;
      /** @description Story name */
      name: string;
      /** @description Brand story prompt */
      prompt?: string;
      /** @description Brand names */
      brands?: string[];
      /** @description Language codes (use language_list tool to see available options) */
      languages: string[];
    };
    UpdateBrandStoryInput: {
      /** @description Brand story ID */
      brandStoryId: string;
      /** @description Story name */
      name?: string;
      /** @description Updated brand story prompt */
      prompt: string;
    };
    DeleteBrandStoryInput: {
      /** @description Brand story ID */
      brandStoryId: string;
    };
    ListBrandStoriesInput: {
      /** @description Filtering criteria */
      where?: {
        [key: string]: unknown;
      };
      /** @description Ordering criteria */
      orderBy?: {
        [key: string]: unknown;
      };
      /** @description Number of records to return */
      take?: number;
      /** @description Number of records to skip */
      skip?: number;
      /** @description Fields to use for distinct selection */
      distinct?: string[];
    };
    /** @description Parameters for listing campaigns */
    ListCampaignsInput: {
      /**
       * @description Filter by brand agent ID
       * @example 123
       */
      brandAgentId?: number;
      /**
       * @description Filter by campaign status
       * @enum {string}
       */
      status?: 'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT';
      /**
       * @description Number of results to return
       * @example 50
       */
      limit?: number;
      /**
       * @description Number of results to skip for pagination
       * @example 0
       */
      offset?: number;
    };
    /** @description Parameters for creating a new campaign */
    CreateCampaignInput: {
      /**
       * @description Brand agent ID that will own this campaign
       * @example 123
       */
      brandAgentId: number;
      /**
       * @description Optional name for the campaign (auto-generated if not provided)
       * @example Summer 2025 Tech Campaign
       */
      name?: string;
      /**
       * @description Natural language description of campaign requirements. The backend will parse this to extract targeting, budget, and creative requirements.
       * @example Create a video campaign targeting tech enthusiasts aged 25-45 with $50k budget
       */
      prompt: string;
      /** @description Budget configuration for the campaign */
      budget?: {
        total: number;
        /** @default USD */
        currency?: string;
        dailyCap?: number;
        /** @enum {string} */
        pacing?: 'EVEN' | 'ASAP' | 'FRONTLOADED';
      };
      /**
       * Format: date-time
       * @description Campaign start date (ISO 8601 format)
       * @example 2025-01-15T00:00:00Z
       */
      startDate?: string;
      /**
       * Format: date-time
       * @description Campaign end date (ISO 8601 format)
       * @example 2025-03-31T23:59:59Z
       */
      endDate?: string;
      /** @description Scoring weights for campaign optimization */
      scoringWeights?: {
        affinity?: number;
        outcome?: number;
        quality?: number;
      };
      /**
       * @description Number of days for outcome measurement window
       * @example 30
       */
      outcomeScoreWindowDays?: number;
      /**
       * @description Initial campaign status
       * @enum {string}
       */
      status?: 'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT';
    };
    /** @description Parameters for retrieving a specific campaign */
    GetCampaignInput: {
      /**
       * @description The unique identifier for the campaign
       * @example cmp_987654321
       */
      campaignId: string;
    };
    /** @description Parameters for updating a campaign */
    UpdateCampaignInput: {
      /**
       * @description The unique identifier for the campaign
       * @example cmp_987654321
       */
      campaignId: string;
      /** @description Updated campaign name */
      name?: string;
      /** @description Updated campaign prompt */
      prompt?: string;
      /** @description Updated budget configuration */
      budget?: {
        total?: number;
        /** @default USD */
        currency?: string;
        dailyCap?: number;
        /** @enum {string} */
        pacing?: 'EVEN' | 'ASAP' | 'FRONTLOADED';
      };
      /**
       * Format: date-time
       * @description Updated start date
       */
      startDate?: string;
      /**
       * Format: date-time
       * @description Updated end date
       */
      endDate?: string;
      /** @description Updated scoring weights */
      scoringWeights?: {
        affinity?: number;
        outcome?: number;
        quality?: number;
      };
      /** @description Updated outcome score window days */
      outcomeScoreWindowDays?: number;
      /**
       * @description Updated campaign status
       * @enum {string}
       */
      status?: 'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT';
    };
    /** @description Parameters for deleting a campaign */
    DeleteCampaignInput: {
      /**
       * @description The unique identifier for the campaign to delete
       * @example cmp_987654321
       */
      campaignId: string;
      /** @description If true, permanently delete the campaign. Default: false (soft delete/archive) */
      hardDelete?: boolean;
    };
    GetCampaignSummaryInput: {
      /** @description Campaign ID */
      campaignId: string;
    };
    ListCampaignTacticsInput: {
      /** @description Campaign ID */
      campaignId: string;
    };
    ValidateBriefInput: {
      /** @description Campaign brief text */
      brief: string;
    };
    ListChannelsInput: Record<string, never>;
    AssignCreativeInput: {
      creativeId: string;
      campaignId: string;
    };
    CreateCreativeInput: {
      brandAgentId: number;
      organizationId?: string;
      name: string;
      description?: string;
      /** @enum {string} */
      formatSource?: 'ADCP' | 'CREATIVE_AGENT' | 'PUBLISHER';
      formatId?: string;
      mediaUrl?: string;
      /** @description Optional: Upload assets inline with the creative. Each asset requires: name, contentType, data (base64), and assetType. */
      assets?: {
        /** @description Filename (e.g., banner.png) */
        name: string;
        /** @description MIME type (e.g., image/png, image/jpeg) */
        contentType: string;
        /**
         * Format: byte
         * @description Base64-encoded file data (without data:image/png;base64, prefix)
         */
        data: string;
        /**
         * @description Type of asset
         * @enum {string}
         */
        assetType: 'image' | 'video' | 'audio' | 'logo' | 'font';
        /** @description Optional tags */
        tags?: string[];
      }[];
      content?: {
        [key: string]: unknown;
      };
      /** @enum {string} */
      assemblyMethod?: 'CREATIVE_AGENT' | 'ACTIVATION' | 'PUBLISHER';
      /** @description Optional campaign ID (object ID) to assign creative to */
      campaignId?: string;
    };
    UpdateCreativeInput: {
      creativeId: string;
      name?: string;
      status?: string;
    };
    DeleteCreativeInput: {
      creativeId: string;
    };
    GetCreativeInput: {
      creativeId: string;
    };
    ListCreativesInput: {
      campaignId?: number;
      brandAgentId?: number;
      /** @enum {string} */
      formatSource?: 'ADCP' | 'CREATIVE_AGENT' | 'PUBLISHER';
      /** @enum {string} */
      status?: 'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT';
      take?: number;
      skip?: number;
    };
    SyncSalesAgentsInput: {
      creativeId: string;
    };
    CreateMediaBuyInput: {
      tacticId: number;
      name: string;
      description?: string;
      products: {
        mediaProductId: string;
        salesAgentId: string;
        budgetAmount?: number;
        budgetCurrency?: string;
        pricingCpm?: number;
        pricingSignalCost?: number;
        displayOrder?: number;
      }[];
      creativeIds?: string[];
      budget: {
        amount: number;
        currency: string;
        dailyCap?: number;
        /** @enum {string} */
        pacing: 'asap' | 'even' | 'front_loaded';
      };
    };
    UpdateMediaBuyInput: {
      mediaBuyId: string;
      name?: string;
      description?: string;
      budget?: {
        amount?: number;
        currency?: string;
        dailyCap?: number;
        /** @enum {string} */
        pacing?: 'asap' | 'even' | 'front_loaded';
      };
      /** @enum {string} */
      status?:
        | 'DRAFT'
        | 'PENDING_APPROVAL'
        | 'ACTIVE'
        | 'PAUSED'
        | 'COMPLETED'
        | 'FAILED'
        | 'REJECTED';
      creativeIds?: string[];
    };
    DeleteMediaBuyInput: {
      mediaBuyId: string;
      confirm: boolean;
    };
    ExecuteMediaBuyInput: {
      mediaBuyId: string;
    };
    GetMediaBuyInput: {
      mediaBuyId: string;
    };
    ListMediaBuysInput: {
      tacticId?: number;
      /** @enum {string} */
      status?:
        | 'DRAFT'
        | 'PENDING_APPROVAL'
        | 'ACTIVE'
        | 'PAUSED'
        | 'COMPLETED'
        | 'FAILED'
        | 'REJECTED';
      take?: number;
      skip?: number;
    };
    ValidateMediaBuyBudgetInput: {
      tacticId: number;
      newBudgetAmount: number;
    };
    ListNotificationsInput: {
      brandAgentId?: number;
      campaignId?: string;
      creativeId?: string;
      tacticId?: string;
      types?: string[];
      unreadOnly?: boolean;
      limit?: number;
      offset?: number;
    };
    MarkNotificationReadInput: {
      notificationId: string;
    };
    MarkNotificationAcknowledgedInput: {
      notificationId: string;
    };
    MarkAllNotificationsReadInput: Record<string, never>;
    DiscoverProductsInput: {
      campaignBrief?: string;
      brandManifestUrl?: string;
      /** @enum {string} */
      deliveryType?: 'guaranteed' | 'non_guaranteed';
      formats?: ('audio' | 'display' | 'html5' | 'native' | 'video')[];
      /** @enum {string} */
      inventoryType?: 'premium' | 'run_of_site' | 'targeted_package';
      maxCpm?: number;
      minCpm?: number;
      publisherIds?: string[];
      salesAgentId?: number;
    };
    SaveProductInput: {
      productId: string;
      name: string;
      description: string;
      publisherId: string;
      publisherName: string;
      /** @enum {string} */
      deliveryType: 'guaranteed' | 'non_guaranteed';
      /** @enum {string} */
      inventoryType: 'premium' | 'run_of_site' | 'targeted_package';
      creativeFormats?:
        | string[]
        | {
            agent_url: string;
            id: string;
          }[];
      /** @enum {string} */
      pricingModel: 'auction' | 'fixed_cpm';
      fixedCpm?: number;
      floorCpm?: number;
      targetCpm?: number;
      pricingOptions?: {
        [key: string]: unknown;
      }[];
      supportedTargeting?: string[];
      adcpAgentId?: string;
    };
    ListProductsInput: {
      take?: number;
      skip?: number;
    };
    SyncProductsInput: {
      sourceId: string;
    };
    GetSalesAgentInput: {
      agentId: string;
    };
    ListSalesAgentsInput: Record<string, never>;
    RegisterSalesAgentInput: {
      name: string;
      description?: string;
      /** Format: uri */
      endpointUrl: string;
      /** @enum {string} */
      protocol: 'MCP' | 'A2A';
      /** @enum {string} */
      authenticationType: 'API_KEY' | 'OAUTH' | 'NO_AUTH';
      organizationId?: string;
      authConfig?: {
        [key: string]: unknown;
      };
    };
    UnregisterSalesAgentInput: {
      agentId: string;
    };
    UpdateSalesAgentInput: {
      agentId: string;
      name?: string;
      description?: string;
      /** Format: uri */
      endpointUrl?: string;
      /** @enum {string} */
      protocol?: 'MCP' | 'A2A';
      /** @enum {string} */
      authenticationType?: 'API_KEY' | 'OAUTH' | 'NO_AUTH';
      authConfig?: {
        [key: string]: unknown;
      };
    };
    ListSalesAgentAccountsInput: {
      agentId: string;
    };
    RegisterSalesAgentAccountInput: {
      salesAgentId: string;
      accountIdentifier: string;
      authConfig?: {
        [key: string]: unknown;
      };
    };
    UnregisterSalesAgentAccountInput: {
      accountId: string;
    };
    UpdateSalesAgentAccountInput: {
      accountId: string;
      accountData: {
        [key: string]: unknown;
      };
    };
    CreateTacticInput: {
      campaignId: string;
      name: string;
      prompt?: string;
      channelCodes?: ('ctv' | 'video' | 'display' | 'app' | 'social')[];
      countryCodes?: string[];
      /** @description Language codes */
      languages?: string[];
      availableBrandStandards?: {
        id: number;
        name: string;
      }[];
      availableBrandStory?: {
        id: number;
        name: string;
      }[];
    };
    UpdateTacticInput: {
      tacticId: number;
      name?: string;
      prompt?: string;
      channelCodes?: ('ctv' | 'video' | 'display' | 'app' | 'social')[];
      countryCodes?: string[];
      availableBrandStandards?: {
        id: number;
        name: string;
      }[];
      availableBrandStory?: {
        id: number;
        name: string;
      }[];
    };
    DeleteTacticInput: {
      tacticId: number;
      confirm: boolean;
    };
    GetTacticInput: {
      tacticId: number;
    };
    ListTacticsInput: {
      campaignId?: string;
      take?: number;
      skip?: number;
    };
    LinkCampaignToTacticInput: {
      tacticId: number;
      campaignId: string;
    };
    UnlinkCampaignFromTacticInput: {
      tacticId: number;
      campaignId: string;
    };
    RegisterWebhookInput: {
      brandAgentId?: number;
      endpoint: {
        /** Format: uri */
        url: string;
        /** @enum {string} */
        method: 'POST' | 'PUT';
        headers?: {
          [key: string]: string;
        };
        authentication?: {
          /** @enum {string} */
          type: 'bearer' | 'basic' | 'hmac';
          credentials: string;
        };
      };
      eventTypes: string[];
      filters?: {
        campaigns?: string[];
        tactics?: string[];
        creatives?: string[];
        mediaBuys?: string[];
        metrics?: string[];
        /** @enum {string} */
        minSeverity?: 'info' | 'warning' | 'critical';
      };
      retryPolicy?: {
        maxRetries?: number;
        backoffMultiplier?: number;
        maxBackoffSeconds?: number;
      };
    };
    ListWebhooksInput: {
      take?: number;
      skip?: number;
    };
    DeleteWebhookInput: {
      webhookId: string;
    };
    BrandAgentUpdate: {
      id: number;
      name: string;
      description?: string;
      /** Format: uri */
      manifestUrl?: string;
      customerId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    BrandStandardsCreate: {
      id: string;
      name: string;
      description?: string;
      countryCodes: string[];
      channelCodes: string[];
      brands: string[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CampaignUpdate: {
      id: string;
      name: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreativeGet: {
      creativeId: string;
      name: string;
      status: string;
      campaignId?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    MediaBuyGet: {
      id: string;
      tacticId: number;
      status: string;
      /** Format: date-time */
      archivedAt?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TacticGet: {
      id: number;
      name: string;
      prompt?: string;
      campaignIds?: string[];
      channelCodes: string[];
      countryCodes: string[];
      mediaBuyCount?: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      archivedAt?: string;
    };
    MCPContent: {
      /** @enum {string} */
      type: 'text';
      text: string;
    };
    /** @description Bad request error response */
    BadRequest: {
      error: string;
      message?: string;
    };
    /** @description Unauthorized error response */
    Unauthorized: {
      error: string;
      message?: string;
    };
    /** @description Internal server error response */
    InternalError: {
      error: string;
      message?: string;
    };
    AssetList: {
      total: number;
      items: {
        assetId: string;
        originalFilename: string;
        assetType: string;
        size: number;
        brandAgentId: string;
        customerId: number;
        signedUrl: string;
        tags?: string[];
      }[];
    };
    BrandAgentList: {
      brandAgents: components['schemas']['BrandAgentUpdateOutput'][];
      total: number;
    };
    BrandAgentDelete: {
      success: boolean;
      deletedId: number;
    };
    BrandStandardsDelete: {
      success: boolean;
      id: string;
    };
    BrandStandardsList: {
      total: number;
      items: components['schemas']['BrandStandardsCreateOutput'][];
    };
    BrandStoryCreate: {
      id: string;
      name: string;
      brandAgentId?: string;
      countryCodes?: string[];
      channelCodes?: string[];
      languages?: string[];
      brands?: string[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    BrandStoryUpdate: {
      id: string;
      name: string;
      prompt?: string;
      status?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    BrandStoryDelete: {
      success: boolean;
      id: string;
    };
    BrandStoryList: {
      total: number;
      items: {
        id: string;
        name: string;
        description?: string;
        status: string;
        type: string;
        /** Format: date-time */
        createdAt: string;
        /** Format: date-time */
        updatedAt: string;
      }[];
    };
    CampaignList: {
      campaigns: components['schemas']['CampaignUpdateOutput'][];
      total: number;
    };
    CampaignDelete: {
      success: boolean;
      deletedId: string;
    };
    CampaignGetSummary: {
      campaignId: string;
      summary: {
        [key: string]: unknown;
      };
    };
    CampaignListTactics: {
      tactics: unknown[];
      total: number;
    };
    CampaignValidateBrief: {
      valid: boolean;
      feedback?: string;
    };
    ChannelList: {
      total: number;
      items: {
        channel: string;
        displayName: string;
      }[];
    };
    CreativeAssign: {
      success: boolean;
      creativeId: string;
      campaignId: string;
    };
    CreativeDelete: {
      success: boolean;
      id: string;
    };
    CreativeList: {
      items: components['schemas']['CreativeGetOutput'][];
      total: number;
    };
    CreativeSyncSalesAgents: {
      success: boolean;
      creativeId: string;
      campaignId?: string;
    };
    MediaBuyDelete: {
      success: boolean;
      id: string;
    };
    MediaBuyExecute: {
      success: boolean;
      mediaBuyId: string;
      status: string;
      adcpMediaBuyId?: string;
      adcpStatus?: string;
    };
    MediaBuyList: {
      total: number;
      items: components['schemas']['MediaBuyGetOutput'][];
    };
    MediaBuyValidateBudget: {
      valid: boolean;
      message?: string;
    };
    NotificationsList: {
      total: number;
      hasMore: boolean;
      items: {
        id: string;
        type: string;
        data: {
          [key: string]: unknown;
        };
        read: boolean;
        acknowledged: boolean;
        /** Format: date-time */
        createdAt: string;
      }[];
    };
    NotificationsMarkRead: {
      success: boolean;
      notificationId: string;
    };
    NotificationsMarkAcknowledged: {
      success: boolean;
      notificationId: string;
    };
    NotificationsMarkAllRead: {
      success: boolean;
      count: number;
    };
    MediaProductDiscover: {
      success: boolean;
      productsFound: number;
      productsSaved: number;
      successfulAgents: number;
      failedAgents: number;
      products: {
        productId: string;
        name: string;
        publisherName: string;
        salesAgentId?: string;
        salesAgentName?: string;
        /** @enum {string} */
        deliveryType: 'guaranteed' | 'non_guaranteed';
        /** @enum {string} */
        inventoryType: 'premium' | 'run_of_site' | 'targeted_package';
        creativeFormats?:
          | string[]
          | {
              agent_url: string;
              id: string;
            }[];
        fixedCpm?: number;
        floorCpm?: number;
        targetCpm?: number;
      }[];
    };
    MediaProductSave: {
      id: string;
      productId: string;
      name: string;
      publisherId: string;
      publisherName: string;
      customerId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    MediaProductList: {
      total: number;
      items: {
        id: string;
        productId: string;
        name: string;
        salesAgent?: string;
        salesAgentId?: string;
        salesAgentName?: string;
        /** @enum {string} */
        deliveryType: 'guaranteed' | 'non_guaranteed';
        format?: string;
        creativeFormats?:
          | string[]
          | {
              agent_url: string;
              id: string;
            }[];
      }[];
    };
    MediaProductSync: {
      success: boolean;
      productsSaved: number;
    };
    SalesAgentGet: {
      id: number;
      name: string;
      status: string;
      relationship: string;
      endpointUrl: string;
      protocol: string;
      authenticationType: string;
      description?: string;
      customerAccountCount: number;
      organizationId?: string;
      registeredBy?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    SalesAgentList: {
      total: number;
      items: {
        id: number;
        name: string;
        status: string;
        relationship: string;
        endpointUrl: string;
        protocol: string;
        customerAccountCount: number;
      }[];
    };
    SalesAgentRegister: {
      id: number;
      name: string;
      status: string;
      endpointUrl: string;
    };
    SalesAgentUnregister: {
      success: boolean;
      id: string;
    };
    SalesAgentUpdate: {
      id: string;
      name: string;
      status: string;
    };
    SalesAgentAccountList: {
      total: number;
      items: {
        id: string;
        accountIdentifier: string;
        status: string;
        registeredBy?: string;
        /** Format: date-time */
        createdAt: string;
        /** Format: date-time */
        updatedAt: string;
      }[];
    };
    SalesAgentAccountRegister: {
      accountId: string;
      adcpAgentId: string;
      status: string;
    };
    SalesAgentAccountUnregister: {
      success: boolean;
      salesAgentId: string;
    };
    SalesAgentAccountUpdate: {
      id: string;
      status: string;
    };
    TacticCreate: {
      id: number;
      name: string;
      prompt?: string;
      campaignId: string;
      channelCodes: string[];
      countryCodes: string[];
      /** Format: date-time */
      createdAt: string;
    };
    TacticDelete: {
      success: boolean;
      tacticId: number;
    };
    TacticList: {
      total: number;
      items: components['schemas']['TacticGetOutput'][];
    };
    TacticLinkCampaign: {
      success: boolean;
      tacticId: number;
      campaignId: string;
    };
    TacticUnlinkCampaign: {
      success: boolean;
      tacticId: number;
      campaignId: string;
    };
    WebhookRegister: {
      id: string;
      brandAgentId?: number;
      endpoint: {
        url: string;
        method: string;
        authenticationType?: string;
      };
      eventTypes: string[];
      filters?: {
        campaigns?: string[];
        tactics?: string[];
        creatives?: string[];
        mediaBuys?: string[];
        metrics?: string[];
        minSeverity?: string;
      };
      retryPolicy: {
        maxRetries: number;
        backoffMultiplier: number;
        maxBackoffSeconds: number;
      };
      status: string;
      testResult: {
        success: boolean;
        statusCode?: number;
        error?: string;
      };
    };
    WebhookList: {
      total: number;
      items: {
        id: string;
        status: string;
        endpoint: {
          url: string;
          method: string;
          authenticationType?: string;
        };
        eventTypes: string[];
        brandAgentId?: number;
        failureCount: number;
        /** Format: date-time */
        lastSuccess?: string | null;
        /** Format: date-time */
        lastFailure?: string | null;
        /** Format: date-time */
        createdAt: string;
      }[];
    };
    WebhookDelete: {
      success: boolean;
      webhookId: string;
    };
    BrandAgentUpdateOutput: {
      id: number;
      name: string;
      description?: string;
      /** Format: uri */
      manifestUrl?: string;
      customerId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    BrandStandardsCreateOutput: {
      id: string;
      name: string;
      description?: string;
      countryCodes: string[];
      channelCodes: string[];
      brands: string[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CampaignUpdateOutput: {
      id: string;
      name: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreativeGetOutput: {
      creativeId: string;
      name: string;
      status: string;
      campaignId?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    MediaBuyGetOutput: {
      id: string;
      tacticId: number;
      status: string;
      /** Format: date-time */
      archivedAt?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TacticGetOutput: {
      id: number;
      name: string;
      prompt?: string;
      campaignIds?: string[];
      channelCodes: string[];
      countryCodes: string[];
      mediaBuyCount?: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      archivedAt?: string;
    };
    BrandAgentGet: {
      id: number;
      name: string;
      description?: string;
      /** Format: uri */
      manifestUrl?: string;
      customerId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    BrandAgentCreate: {
      id: number;
      name: string;
      description?: string;
      /** Format: uri */
      manifestUrl?: string;
      customerId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CampaignCreate: {
      id: string;
      name: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CampaignGet: {
      id: string;
      name: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreativeCreate: {
      creativeId: string;
      name: string;
      status: string;
      campaignId?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreativeUpdate: {
      creativeId: string;
      name: string;
      status: string;
      campaignId?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    MediaBuyCreate: {
      id: string;
      tacticId: number;
      status: string;
      /** Format: date-time */
      archivedAt?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    MediaBuyUpdate: {
      id: string;
      tacticId: number;
      status: string;
      /** Format: date-time */
      archivedAt?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TacticUpdate: {
      id: number;
      name: string;
      prompt?: string;
      campaignIds?: string[];
      channelCodes: string[];
      countryCodes: string[];
      mediaBuyCount?: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      archivedAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Initialize MCP session
   * @description Initialize a new MCP session. This must be called before using any tools. The session ID should be generated as a UUID and included in the mcp-session-id header for all subsequent requests.
   */
  mcp_initialize: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Generate a new UUID for session initialization. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          jsonrpc: '2.0';
          id: string | number;
          /** @enum {string} */
          method: 'initialize';
          params: {
            /** @example 2024-11-05 */
            protocolVersion: string;
            capabilities: Record<string, never>;
            clientInfo: {
              name: string;
              version: string;
            };
          };
        };
      };
    };
    responses: {
      /** @description Session initialized successfully */
      200: {
        content: {
          'application/json': {
            /** @enum {string} */
            jsonrpc?: '2.0';
            id?: string | number;
            result?: {
              protocolVersion?: string;
              capabilities?: Record<string, never>;
              serverInfo?: {
                name?: string;
                version?: string;
              };
            };
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
    };
  };
  /**
   * List brand agents
   * @description List all brand agents (advertiser accounts) for the authenticated customer. Authentication is automatic - no parameters required.
   */
  brand_agent_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_agent_list';
          arguments: components['schemas']['ListBrandAgentsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandAgentList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get brand agent
   * @description Get detailed information about a specific brand agent (advertiser account) by ID.
   */
  brand_agent_get: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_agent_get';
          arguments: components['schemas']['GetBrandAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandAgentUpdateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create brand agent
   * @description Create a new brand agent (advertiser account). This creates the top-level container that will own campaigns, creatives, audiences, standards, and measurement sources.
   */
  brand_agent_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_agent_create';
          arguments: components['schemas']['CreateBrandAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandAgentUpdateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update brand agent
   * @description Update an existing brand agent with new information.
   */
  brand_agent_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_agent_update';
          arguments: components['schemas']['UpdateBrandAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandAgentUpdateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete brand agent
   * @description Delete a brand agent. This will also delete all associated campaigns, creatives, and other resources.
   */
  brand_agent_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_agent_delete';
          arguments: components['schemas']['DeleteBrandAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandAgentDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List campaigns
   * @description List all campaigns with optional filtering by brand agent.
   */
  campaign_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_list';
          arguments: components['schemas']['ListCampaignsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create campaign
   * @description Create a new campaign with natural language prompt. The backend will parse the prompt to extract targeting, budget, and creative requirements.
   */
  campaign_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_create';
          arguments: components['schemas']['CreateCampaignInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignUpdateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get campaign
   * @description Get detailed information about a specific campaign.
   */
  campaign_get: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_get';
          arguments: components['schemas']['GetCampaignInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignUpdateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update campaign
   * @description Update an existing campaign with new information.
   */
  campaign_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_update';
          arguments: components['schemas']['UpdateCampaignInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignUpdateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete campaign
   * @description Delete a campaign and all associated resources.
   */
  campaign_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_delete';
          arguments: components['schemas']['DeleteCampaignInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get campaign summary
   * @description Get a high-level summary of a campaign including key metrics and status.
   */
  campaign_get_summary: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_get_summary';
          arguments: components['schemas']['GetCampaignSummaryInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignGetSummary'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List campaign tactics
   * @description List all tactics associated with a specific campaign.
   */
  campaign_list_tactics: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_list_tactics';
          arguments: components['schemas']['ListCampaignTacticsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignListTactics'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Validate campaign brief
   * @description Validate a campaign brief to ensure it contains all necessary information for campaign creation.
   */
  campaign_validate_brief: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'campaign_validate_brief';
          arguments: components['schemas']['ValidateBriefInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CampaignValidateBrief'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List assets
   * @description List all uploaded assets with optional filtering by brand agent.
   */
  asset_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'asset_list';
          arguments: components['schemas']['ListAssetsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['AssetList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create brand standards
   * @description Create brand standards including guidelines, tone of voice, visual requirements, and content rules for a brand agent.
   */
  brand_standards_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_standards_create';
          arguments: components['schemas']['CreateBrandStandardInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStandardsCreateOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete brand standards
   * @description Delete brand standards for a brand agent.
   */
  brand_standards_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_standards_delete';
          arguments: components['schemas']['DeleteBrandStandardInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStandardsDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List brand standards
   * @description List all brand standards with optional filtering by brand agent.
   */
  brand_standards_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_standards_list';
          arguments: components['schemas']['ListBrandStandardsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStandardsList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create brand story
   * @description Create a brand story containing the narrative, history, values, and key messaging for a brand agent.
   */
  brand_story_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_story_create';
          arguments: components['schemas']['CreateBrandStoryInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStoryCreate'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update brand story
   * @description Update an existing brand story with new information.
   */
  brand_story_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_story_update';
          arguments: components['schemas']['UpdateBrandStoryInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStoryUpdate'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete brand story
   * @description Delete a brand story.
   */
  brand_story_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_story_delete';
          arguments: components['schemas']['DeleteBrandStoryInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStoryDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List brand stories
   * @description List all brand stories with optional filtering by brand agent.
   */
  brand_story_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'brand_story_list';
          arguments: components['schemas']['ListBrandStoriesInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['BrandStoryList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List channels
   * @description List all available advertising channels and platforms.
   */
  channel_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'channel_list';
          arguments: components['schemas']['ListChannelsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['ChannelList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Assign creative
   * @description Assign a creative to a tactic or media buy.
   */
  creative_assign: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_assign';
          arguments: components['schemas']['AssignCreativeInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeAssign'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create creative
   * @description Create a new creative with assets, copy, and targeting specifications.
   */
  creative_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_create';
          arguments: components['schemas']['CreateCreativeInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update creative
   * @description Update an existing creative with new assets, copy, or specifications.
   */
  creative_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_update';
          arguments: components['schemas']['UpdateCreativeInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete creative
   * @description Delete a creative and remove it from any associated tactics or media buys.
   */
  creative_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_delete';
          arguments: components['schemas']['DeleteCreativeInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get creative
   * @description Get detailed information about a specific creative.
   */
  creative_get: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_get';
          arguments: components['schemas']['GetCreativeInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List creatives
   * @description List all creatives with optional filtering by brand agent or campaign.
   */
  creative_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_list';
          arguments: components['schemas']['ListCreativesInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Sync creatives to sales agents
   * @description Synchronize creatives to connected sales agents (DSPs, publisher platforms).
   */
  creative_sync_sales_agents: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'creative_sync_sales_agents';
          arguments: components['schemas']['SyncSalesAgentsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['CreativeSyncSalesAgents'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create media buy
   * @description Create a new media buy with budget, targeting, and creative specifications.
   */
  media_buy_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_create';
          arguments: components['schemas']['CreateMediaBuyInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update media buy
   * @description Update an existing media buy with new budget, targeting, or creative assignments.
   */
  media_buy_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_update';
          arguments: components['schemas']['UpdateMediaBuyInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete media buy
   * @description Delete a media buy and cancel any active placements.
   */
  media_buy_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_delete';
          arguments: components['schemas']['DeleteMediaBuyInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Execute media buy
   * @description Execute a media buy, sending it to the configured sales agents for placement.
   */
  media_buy_execute: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_execute';
          arguments: components['schemas']['ExecuteMediaBuyInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyExecute'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get media buy
   * @description Get detailed information about a specific media buy.
   */
  media_buy_get: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_get';
          arguments: components['schemas']['GetMediaBuyInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List media buys
   * @description List all media buys with optional filtering by brand agent, campaign, or status.
   */
  media_buy_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_list';
          arguments: components['schemas']['ListMediaBuysInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Validate media buy budget
   * @description Validate a media buy budget against campaign constraints and available funds.
   */
  media_buy_validate_budget: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_buy_validate_budget';
          arguments: components['schemas']['ValidateMediaBuyBudgetInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaBuyValidateBudget'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List notifications
   * @description List notifications for the authenticated user with optional filtering by status.
   */
  notifications_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'notifications_list';
          arguments: components['schemas']['ListNotificationsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['NotificationsList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Mark notification as read
   * @description Mark a specific notification as read.
   */
  notifications_mark_read: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'notifications_mark_read';
          arguments: components['schemas']['MarkNotificationReadInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['NotificationsMarkRead'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Mark notification as acknowledged
   * @description Mark a specific notification as acknowledged.
   */
  notifications_mark_acknowledged: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'notifications_mark_acknowledged';
          arguments: components['schemas']['MarkNotificationAcknowledgedInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['NotificationsMarkAcknowledged'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Mark all notifications as read
   * @description Mark all notifications for the authenticated user as read.
   */
  notifications_mark_all_read: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'notifications_mark_all_read';
          arguments: components['schemas']['MarkAllNotificationsReadInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['NotificationsMarkAllRead'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Discover media products
   * @description Discover available media products from connected sales agents based on targeting criteria.
   */
  media_product_discover: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_product_discover';
          arguments: components['schemas']['DiscoverProductsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaProductDiscover'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Save media product
   * @description Save a discovered media product for future use in media buys.
   */
  media_product_save: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_product_save';
          arguments: components['schemas']['SaveProductInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaProductSave'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List media products
   * @description List saved media products with optional filtering.
   */
  media_product_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_product_list';
          arguments: components['schemas']['ListProductsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaProductList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Sync media products
   * @description Synchronize media product catalog from connected sales agents.
   */
  media_product_sync: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'media_product_sync';
          arguments: components['schemas']['SyncProductsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['MediaProductSync'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get sales agent
   * @description Get detailed information about a specific sales agent (DSP, publisher platform).
   */
  sales_agent_get: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_get';
          arguments: components['schemas']['GetSalesAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentGet'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List sales agents
   * @description List all registered sales agents (DSPs, publisher platforms).
   */
  sales_agent_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_list';
          arguments: components['schemas']['ListSalesAgentsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Register sales agent
   * @description Register a new sales agent (DSP, publisher platform) for media buying.
   */
  sales_agent_register: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_register';
          arguments: components['schemas']['RegisterSalesAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentRegister'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Unregister sales agent
   * @description Unregister a sales agent and disconnect it from the platform.
   */
  sales_agent_unregister: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_unregister';
          arguments: components['schemas']['UnregisterSalesAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentUnregister'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update sales agent
   * @description Update sales agent configuration and credentials.
   */
  sales_agent_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_update';
          arguments: components['schemas']['UpdateSalesAgentInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentUpdate'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List sales agent accounts
   * @description List all accounts (seats, advertisers) within a sales agent.
   */
  sales_agent_account_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_account_list';
          arguments: components['schemas']['ListSalesAgentAccountsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentAccountList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Register sales agent account
   * @description Register a new account (seat, advertiser) within a sales agent.
   */
  sales_agent_account_register: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_account_register';
          arguments: components['schemas']['RegisterSalesAgentAccountInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentAccountRegister'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Unregister sales agent account
   * @description Unregister an account from a sales agent.
   */
  sales_agent_account_unregister: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_account_unregister';
          arguments: components['schemas']['UnregisterSalesAgentAccountInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentAccountUnregister'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update sales agent account
   * @description Update account configuration within a sales agent.
   */
  sales_agent_account_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'sales_agent_account_update';
          arguments: components['schemas']['UpdateSalesAgentAccountInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['SalesAgentAccountUpdate'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Create tactic
   * @description Create a new tactic defining how to achieve campaign objectives.
   */
  tactic_create: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_create';
          arguments: components['schemas']['CreateTacticInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticCreate'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Update tactic
   * @description Update an existing tactic with new targeting, budget, or creative requirements.
   */
  tactic_update: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_update';
          arguments: components['schemas']['UpdateTacticInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete tactic
   * @description Delete a tactic and all associated media buys.
   */
  tactic_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_delete';
          arguments: components['schemas']['DeleteTacticInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Get tactic
   * @description Get detailed information about a specific tactic.
   */
  tactic_get: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_get';
          arguments: components['schemas']['GetTacticInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticGetOutput'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List tactics
   * @description List all tactics with optional filtering by brand agent or campaign.
   */
  tactic_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_list';
          arguments: components['schemas']['ListTacticsInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Link tactic to campaign
   * @description Link a tactic to a campaign.
   */
  tactic_link_campaign: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_link_campaign';
          arguments: components['schemas']['LinkCampaignToTacticInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticLinkCampaign'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Unlink tactic from campaign
   * @description Unlink a tactic from a campaign.
   */
  tactic_unlink_campaign: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'tactic_unlink_campaign';
          arguments: components['schemas']['UnlinkCampaignFromTacticInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['TacticUnlinkCampaign'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Register webhook
   * @description Register a webhook to receive real-time notifications about events.
   */
  webhook_register: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'webhook_register';
          arguments: components['schemas']['RegisterWebhookInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['WebhookRegister'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * List webhooks
   * @description List all registered webhooks.
   */
  webhook_list: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'webhook_list';
          arguments: components['schemas']['ListWebhooksInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['WebhookList'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  /**
   * Delete webhook
   * @description Delete a registered webhook.
   */
  webhook_delete: {
    parameters: {
      header: {
        /** @description MCP session identifier (UUID). Initialize your session using the /mcp-initialize endpoint first to obtain a session ID, then reuse it for all subsequent tool requests in the same session. */
        'mcp-session-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          tool: 'webhook_delete';
          arguments: components['schemas']['DeleteWebhookInput'];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            content: components['schemas']['MCPContent'][];
            structuredContent: components['schemas']['WebhookDelete'];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Unauthorized'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
}
