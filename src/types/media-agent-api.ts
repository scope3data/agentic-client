/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/get-proposed-tactics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get tactic proposals from your agent
     * @description Scope3 calls this endpoint when setting up a campaign to ask what tactics
     *     your agent can handle and how you would approach execution.
     *
     *     Analyze the campaign and respond with proposed tactics, budget capacity,
     *     and your pricing model.
     */
    post: operations['get_proposed_tactics'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/manage-tactic': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Accept or decline tactic assignment
     * @description Scope3 calls this when your agent is assigned to manage a tactic.
     *     You should acknowledge and begin setup, or decline if you can't fulfill it.
     *
     *     The tactic context contains everything you need: budget, schedule,
     *     targeting constraints, creatives, and any custom fields.
     */
    post: operations['manage_tactic'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tactic-context-updated': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Notification of tactic changes
     * @description Scope3 calls this when a tactic is modified by the user or their agent.
     *     Changes may include budget adjustments, schedule changes, or other updates.
     *
     *     Your agent MUST handle these changes as they may impact targeting,
     *     delivery, or budget allocation.
     */
    post: operations['tactic_context_updated'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tactic-creatives-updated': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Notification of creative changes
     * @description Scope3 calls this when creatives are added, removed, or modified for a tactic.
     *
     *     Update your media buys to use the new creative assets.
     */
    post: operations['tactic_creatives_updated'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tactic-feedback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Performance feedback from orchestrator
     * @description Scope3 sends performance feedback to help you optimize delivery.
     *
     *     - deliveryIndex: 100 = on target, <100 = under-delivering, >100 = over-delivering
     *     - performanceIndex: 100 = maximum, relative to target or other tactics
     *
     *     Your agent MAY use this to adjust targeting, budget allocation, or other settings.
     */
    post: operations['tactic_feedback'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Budget range for campaign planning (buyer typically won't reveal full budget) */
    BudgetRange: {
      /**
       * @description Minimum budget available
       * @example 50000
       */
      min?: number;
      /**
       * @description Maximum budget available
       * @example 150000
       */
      max?: number;
      /**
       * @description Currency for budget (ISO 4217 code)
       * @default USD
       * @example USD
       */
      currency: string;
    };
    TacticPricing: {
      /**
       * @description How the media agent charges for this tactic (passthrough, revshare, or cost_per_unit)
       * @example revshare
       * @enum {string}
       */
      method: 'passthrough' | 'revshare' | 'cost_per_unit';
      /**
       * @description Rate for the pricing method (e.g., 0.15 for 15% revshare, 2.50 for $2.50 CPM)
       * @example 0.15
       */
      rate: number;
      /**
       * @description Currency for pricing (ISO 4217 code)
       * @default USD
       * @example USD
       */
      currency: string;
    };
    CustomField: {
      /**
       * @description Name of the custom field
       * @example targetVCPM
       */
      fieldName?: string;
      /**
       * @description Data type of the field
       * @example number
       * @enum {string}
       */
      fieldType?: 'string' | 'number' | 'boolean' | 'array' | 'object';
      /**
       * @description Help text explaining what this field does
       * @example Target vCPM in USD
       */
      description?: string;
    };
    GetProposedTacticsRequest: {
      /**
       * @description Campaign ID
       * @example camp_123
       */
      campaignId: string;
      budgetRange?: components['schemas']['BudgetRange'];
      /**
       * Format: date-time
       * @description Campaign start date in UTC (ISO 8601 format)
       * @example 2025-01-01T00:00:00Z
       */
      startDate?: string;
      /**
       * Format: date-time
       * @description Campaign end date in UTC (ISO 8601 format)
       * @example 2025-01-31T23:59:59Z
       */
      endDate?: string;
      /**
       * @description Advertising channels (aligned with AdCP channel schema)
       * @example [
       *       "display",
       *       "video"
       *     ]
       */
      channels?: ('display' | 'video' | 'audio' | 'native' | 'ctv')[];
      /**
       * @description ISO 3166-1 alpha-2 country codes
       * @example [
       *       "US",
       *       "CA"
       *     ]
       */
      countries?: string[];
      /**
       * @description Campaign objectives/outcomes (e.g., awareness, consideration, conversion)
       * @example [
       *       "awareness",
       *       "consideration"
       *     ]
       */
      objectives?: string[];
      /**
       * @description Campaign brief text
       * @example Launch campaign for new product...
       */
      brief?: string;
      /**
       * @description AdCP pricing models acceptable to the buyer for sales agent pricing
       * @example [
       *       "cpm",
       *       "vcpm",
       *       "flat_rate"
       *     ]
       */
      acceptedPricingMethods?: ('cpm' | 'vcpm' | 'cpc' | 'cpcv' | 'cpv' | 'cpp' | 'flat_rate')[];
      promotedOfferings?: components['schemas']['PromotedOfferings'];
      /**
       * @description Seat/account ID for this request
       * @example seat_456
       */
      seatId: string;
    };
    ProposedTactic: {
      /**
       * @description Unique identifier for this proposed tactic (you generate this)
       * @example premium-vcpm-display
       */
      tacticId: string;
      /**
       * @description How you would execute this tactic
       * @example Target premium inventory at $2.50 vCPM with 85% viewability
       */
      execution: string;
      /**
       * @description Maximum budget you can effectively manage
       * @example 50000
       */
      budgetCapacity: number;
      pricing: components['schemas']['TacticPricing'];
      /**
       * @description Identifier for this tactic type
       * @example premium-vcpm
       */
      sku?: string;
      /** @description Custom fields needed to execute this tactic */
      customFieldsRequired?: components['schemas']['CustomField'][];
    };
    GetProposedTacticsResponse: {
      /** @description List of tactics you can handle (empty array if none) */
      proposedTactics?: components['schemas']['ProposedTactic'][];
    };
    TacticContext: {
      /**
       * @description Budget allocated
       * @example 50000
       */
      budget?: number;
      /**
       * @description Currency for budget (ISO 4217 code)
       * @default USD
       * @example USD
       */
      budgetCurrency: string;
      /**
       * Format: date-time
       * @description Tactic start date in UTC (ISO 8601 format)
       * @example 2025-01-01T00:00:00Z
       */
      startDate?: string;
      /**
       * Format: date-time
       * @description Tactic end date in UTC (ISO 8601 format)
       * @example 2025-01-31T23:59:59Z
       */
      endDate?: string;
      /**
       * @description Advertising channel (aligned with AdCP channel schema)
       * @example display
       * @enum {string}
       */
      channel?: 'display' | 'video' | 'audio' | 'native' | 'ctv';
      /**
       * @description Target countries
       * @example [
       *       "US"
       *     ]
       */
      countries?: string[];
      /** @description Creative assets to use (uses Creative from main schema) */
      creatives?: components['schemas']['Creative'][];
      /** @description Brand safety and suitability requirements (uses BrandStandard from main schema) */
      brandStandards?: components['schemas']['BrandStandard'][];
    };
    ManageTacticRequest: {
      /**
       * @description ID of the tactic (matches one you proposed)
       * @example premium-vcpm-display
       */
      tacticId: string;
      tacticContext: components['schemas']['TacticContext'];
      /**
       * @description Brand agent (advertiser) for this campaign
       * @example ba_123
       */
      brandAgentId: string;
      /**
       * @description Seat/account ID
       * @example seat_456
       */
      seatId: string;
      /**
       * @description Custom fields provided by advertiser
       * @example {
       *       "targetVCPM": 2.5
       *     }
       */
      customFields?: Record<string, never>;
    };
    ManageTacticResponse: {
      /**
       * @description true to accept assignment, false to decline
       * @example true
       */
      acknowledged: boolean;
      /**
       * @description Optional reason if declining
       * @example Insufficient budget for effective optimization
       */
      reason?: string;
    };
    PatchOperation: {
      /**
       * @description Patch operation type
       * @example replace
       * @enum {string}
       */
      op?: 'add' | 'remove' | 'replace';
      /**
       * @description JSON Pointer to changed field
       * @example /budget
       */
      path?: string;
      /** @description New value for the field */
      value?: unknown;
    };
    TacticContextUpdatedRequest: {
      /**
       * @description Tactic ID
       * @example premium-vcpm-display
       */
      tacticId: string;
      /** @description Current tactic state (after changes) */
      tactic: Record<string, never>;
      /** @description Changes in JSON Patch format (RFC 6902) */
      patch: components['schemas']['PatchOperation'][];
    };
    TacticCreativesUpdatedRequest: {
      /**
       * @description Tactic ID
       * @example premium-vcpm-display
       */
      tacticId: string;
      /** @description Updated creative assets */
      creatives: components['schemas']['Creative'][];
      /** @description Changes to creatives array in JSON Patch format */
      patch: components['schemas']['PatchOperation'][];
    };
    Creative: {
      /**
       * @description Unique identifier for the creative
       * @example cr_001
       */
      creativeId: string;
      /**
       * @description Name of the creative
       * @example Summer Campaign Banner
       */
      name: string;
      /**
       * @description Status of the creative
       * @example ACTIVE
       */
      status: string;
      /**
       * @description Campaign this creative belongs to (optional)
       * @example camp_123
       */
      campaignId?: string;
      /**
       * Format: date-time
       * @description When the creative was created (ISO 8601 UTC)
       * @example 2025-01-01T00:00:00Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description When the creative was last updated (ISO 8601 UTC)
       * @example 2025-01-15T14:30:00Z
       */
      updatedAt: string;
    };
    BrandStandard: {
      /**
       * @description Unique identifier for the brand standard
       * @example bs_001
       */
      id: string;
      /**
       * @description Name of the brand standard
       * @example Premium Brand Safety
       */
      name: string;
      /**
       * @description Description of the standard (optional)
       * @example High viewability requirements for premium inventory
       */
      description?: string;
      /**
       * @description ISO 3166-1 alpha-2 country codes this standard applies to
       * @example [
       *       "US",
       *       "CA"
       *     ]
       */
      countryCodes: string[];
      /**
       * @description Channels this standard applies to
       * @example [
       *       "display",
       *       "video"
       *     ]
       */
      channelCodes: string[];
      /**
       * @description Brand names this standard applies to
       * @example [
       *       "Brand A",
       *       "Brand B"
       *     ]
       */
      brands: string[];
      /**
       * Format: date-time
       * @description When the standard was created (ISO 8601 UTC)
       * @example 2025-01-01T00:00:00Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description When the standard was last updated (ISO 8601 UTC)
       * @example 2025-01-15T14:30:00Z
       */
      updatedAt: string;
    };
    TacticFeedbackRequest: {
      /**
       * @description Tactic ID
       * @example premium-vcpm-display
       */
      tacticId: string;
      /**
       * Format: date-time
       * @description Start of feedback interval in UTC (ISO 8601 format)
       * @example 2025-01-01T00:00:00Z
       */
      startDate: string;
      /**
       * Format: date-time
       * @description End of feedback interval in UTC (ISO 8601 format)
       * @example 2025-01-07T23:59:59Z
       */
      endDate: string;
      /**
       * @description Delivery performance (100 = on target)
       * @example 95
       */
      deliveryIndex: number;
      /**
       * @description Performance vs target or peers (100 = maximum)
       * @example 110
       */
      performanceIndex: number;
    };
    /** @description Complete offering specification combining brand manifest, product selectors, and inline offerings (AdCP spec) */
    PromotedOfferings: {
      /** @description Brand information manifest (inline object or URL reference) */
      brand_manifest: components['schemas']['BrandManifest'] | string;
      /** @description Optional product catalog selectors */
      product_selectors?: {
        /**
         * @description Specific product IDs to promote
         * @example [
         *       "prod_123",
         *       "prod_456"
         *     ]
         */
        product_ids?: string[];
      };
      /** @description Inline offerings for campaigns without a product catalog */
      offerings?: {
        /**
         * @description Offering name
         * @example Winter Sale
         */
        name: string;
        /**
         * @description Description of what's being offered
         * @example 20% off all winter products
         */
        description?: string;
        /** @description Assets specific to this offering */
        assets?: Record<string, never>[];
      }[];
    };
    /** @description Brand information manifest containing assets, themes, and guidelines (AdCP spec) */
    BrandManifest: {
      /**
       * Format: uri
       * @description Primary brand URL for context and asset discovery
       * @example https://brand.example.com
       */
      url?: string;
      /**
       * @description Brand or business name
       * @example Acme Corporation
       */
      name?: string;
      /** @description Brand logo assets with semantic tags */
      logos?: {
        /**
         * Format: uri
         * @description URL to the logo asset
         * @example https://cdn.example.com/logo.png
         */
        url: string;
        /**
         * @description Semantic tags (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')
         * @example [
         *       "dark",
         *       "horizontal"
         *     ]
         */
        tags?: string[];
        /**
         * @description Logo width in pixels
         * @example 200
         */
        width?: number;
        /**
         * @description Logo height in pixels
         * @example 50
         */
        height?: number;
      }[];
      /** @description Brand color palette */
      colors?: {
        /**
         * @description Primary brand color (hex)
         * @example #0D9373
         */
        primary?: string;
        /**
         * @description Secondary brand color (hex)
         * @example #07C983
         */
        secondary?: string;
        /** @description Accent color (hex) */
        accent?: string;
        /** @description Background color (hex) */
        background?: string;
        /** @description Text color (hex) */
        text?: string;
      };
      /** @description Brand typography guidelines */
      fonts?: {
        /**
         * @description Primary font family name
         * @example Inter
         */
        primary?: string;
        /**
         * @description Secondary font family name
         * @example Georgia
         */
        secondary?: string;
        /** @description URLs to web font files if using custom fonts */
        font_urls?: string[];
      };
      /**
       * @description Brand voice and messaging tone
       * @example professional
       */
      tone?: string;
      /**
       * @description Brand tagline or slogan
       * @example Innovation that moves you forward
       */
      tagline?: string;
      /** @description Product catalog information for e-commerce advertisers (enables SKU-level creative generation) */
      product_catalog?: {
        /**
         * Format: uri
         * @description URL to product catalog feed
         * @example https://brand.example.com/products.xml
         */
        feed_url: string;
        /**
         * @description Format of the product feed
         * @enum {string}
         */
        feed_format?: 'google_merchant_center' | 'facebook_catalog' | 'custom';
        /**
         * @description Product categories available in the catalog
         * @example [
         *       "electronics",
         *       "apparel",
         *       "home_goods"
         *     ]
         */
        categories?: string[];
        /**
         * Format: date-time
         * @description When the product catalog was last updated
         */
        last_updated?: string;
        /**
         * @description How frequently the product catalog is updated
         * @enum {string}
         */
        update_frequency?: 'realtime' | 'hourly' | 'daily' | 'weekly';
      };
      /**
       * @description Industry or vertical
       * @example retail
       */
      industry?: string;
      /**
       * @description Primary target audience description
       * @example Tech-savvy millennials aged 25-40
       */
      target_audience?: string;
      /** @description Legal disclaimers or required text that must appear in creatives */
      disclaimers?: {
        /** @description Disclaimer text */
        text: string;
        /** @description When this disclaimer applies (e.g., financial_products, all) */
        context?: string;
        /** @description Whether this disclaimer must appear */
        required?: boolean;
      }[];
      /** @description Brand contact information */
      contact?: {
        /**
         * Format: email
         * @description Contact email
         */
        email?: string;
        /** @description Contact phone number */
        phone?: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_proposed_tactics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetProposedTacticsRequest'];
      };
    };
    responses: {
      /** @description Tactic proposals from your agent */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetProposedTacticsResponse'];
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  manage_tactic: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ManageTacticRequest'];
      };
    };
    responses: {
      /** @description Acknowledgment of tactic assignment */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ManageTacticResponse'];
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  tactic_context_updated: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TacticContextUpdatedRequest'];
      };
    };
    responses: {
      /** @description Acknowledged */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  tactic_creatives_updated: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TacticCreativesUpdatedRequest'];
      };
    };
    responses: {
      /** @description Acknowledged */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  tactic_feedback: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TacticFeedbackRequest'];
      };
    };
    responses: {
      /** @description Acknowledged */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
